class Decode:    def __init__(self, jobs, chs_len) -> None:        self.jobs = jobs        self.jobs_num = len(self.jobs)        self.chs_len = chs_len        self.accumulation_job_operations = []        s = 0        for i in range(self.jobs_num):            self.accumulation_job_operations.append(s)            s += self.jobs[i].operations_num    def decode4fjsp(self, chs, m):        ms = chs[0:self.chs_len]        os = chs[self.chs_len:]                j_m, t = self.ms_decode(ms)                #嵌套列表中第一个元素表示对应工件工序，第二个代表上一个工序的结束时间        j_visited = [[0, 0.] for _ in range(self.jobs_num)]        for j in os:            operation = (j, j_visited[j][0])            j_visited[j][0] += 1            m_index = j_m[operation[0]][operation[1]]            m_t = t[operation[0]][operation[1]]            operation_end_time = m[m_index].add_operation(operation, m_t, j_visited[j][1])            j_visited[j][1] = operation_end_time    def ms_decode(self, ms):        j_m = []        t = []        for j in range(self.jobs_num):            job = self.jobs[j]            _j_m = []            _t = []            for o_ in range(job.operations_num):                o_avail_m = job.get_avail_m(o_)                site = self.ms_site(j, o_)                m = o_avail_m[ms[site]]                spend_time = job.get_o_m_time(o_, m)                _j_m.append(m)                _t.append(spend_time)            j_m.append(_j_m)            t.append(_t)        return j_m, t    def ms_site(self, j, o_):        return self.accumulation_job_operations[j] + o_